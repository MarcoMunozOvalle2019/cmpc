
services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "1234"
      # No necesitamos POSTGRES_DB aquí, lo crearemos en el script
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cmpc_libro"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:"1234"@postgres:5432/cmpc_libro
      PORT: 3000
      NODE_ENV: development # O production
      # Otras variables de entorno específicas de tu backend
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/usr/src/app
      - backend_node_modules:/usr/src/app/node_modules
    command: npm run start:dev # O el comando para iniciar tu backend en desarrollo
    restart: on-failure
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:3000" # Usamos el puerto 3001 en el host para evitar conflictos con el backend
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_build:/app/build # Para servir la build optimizada si es necesario
    environment:
      # Variables de entorno específicas de tu frontend (ej., API_URL)
      REACT_APP_API_URL: http://localhost:3000 # Conexión al backend en el host
      NODE_ENV: development # O production
    command: npm start # O el comando para iniciar tu frontend en desarrollo
    depends_on:
      - backend
    restart: on-failure
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  backend_node_modules:
  frontend_node_modules:
  frontend_build: